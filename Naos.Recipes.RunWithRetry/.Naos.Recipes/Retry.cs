// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Retry.cs" company="Naos">
//   Copyright 2015 Naos
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Naos.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Recipes.RunWithRetry
{
    using System;
    using System.Threading.Tasks;

    using Polly;

    /// <summary>
    /// Retry utility.
    /// </summary>
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Recipes", "See package version number")]
    internal static class Retry
    {
        /// <summary>
        /// Runs a function with specified number or retries waiting between each one for the number of seconds multiplied by the attempt number.
        /// </summary>
        /// <param name="func">Function to run.</param>
        /// <param name="retryCount">Retry count (Default: 3).</param>
        /// <param name="attemptSecondsToWaitMultiplier">Number of seconds to multiply by attempt number and wait between retries (Default: 5).</param>
        /// <returns>Task for async.</returns>
        public static async Task RunAsync(Func<Task> func, int retryCount = 3, int attemptSecondsToWaitMultiplier = 5)
        {
            await Policy.Handle<Exception>().WaitAndRetryAsync(retryCount, attempt => TimeSpan.FromSeconds(attempt * attemptSecondsToWaitMultiplier)).ExecuteAsync(func);
        }

        /// <summary>
        /// Runs a function with specified number or retries waiting between each one for the number of seconds multiplied by the attempt number.
        /// </summary>
        /// <param name="func">Function to run.</param>
        /// <param name="retryCount">Retry count (Default: 3).</param>
        /// <param name="attemptSecondsToWaitMultiplier">Number of seconds to multiply by attempt number and wait between retries (Default: 5).</param>
        /// <returns>Specified return type.</returns>
        /// <typeparam name="T">Type of return of the provided function.</typeparam>
        public static async Task<T> RunAsync<T>(Func<Task<T>> func, int retryCount = 3, int attemptSecondsToWaitMultiplier = 5)
        {
            return await Policy.Handle<Exception>().WaitAndRetryAsync(retryCount, attempt => TimeSpan.FromSeconds(attempt * attemptSecondsToWaitMultiplier)).ExecuteAsync(func);
        }
    }
}
