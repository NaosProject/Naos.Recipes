// --------------------------------------------------------------------------------------------------------------------
// <copyright file="NaosJsonFormatter.cs" company="Naos">
//    Copyright (c) Naos 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Naos.Recipes.Api.SelfHost.Bootstrapper.Common source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace $rootnamespace$
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Formatting;
    using System.Text;
    using System.Threading.Tasks;
    using Naos.Serialization.Json;

    /// <summary>
    /// MediaTypeFormatter that wraps the <see cref="NaosJsonSerializer"/>.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Recipes.Api.SelfHost.Bootstrapper.Common", "See package version number")]
    public class NaosJsonFormatter : MediaTypeFormatter
    {
        private readonly IReadOnlyDictionary<Type, Func<object, string>> typeSerializationMap;
        private readonly IReadOnlyDictionary<Type, Func<Type, string, object>> typeDeserializationMap;

        /// <summary>
        /// Initializes a new instance of the <see cref="NaosJsonFormatter"/> class.
        /// </summary>
        /// <param name="typeSerializationMap">Custom serialization handlers.</param>
        /// <param name="typeDeserializationMap">Custom deserialization handlers.</param>
        public NaosJsonFormatter(
            IReadOnlyDictionary<Type, Func<object, string>> typeSerializationMap = null,
            IReadOnlyDictionary<Type, Func<Type, string, object>> typeDeserializationMap = null)
        {
            this.typeSerializationMap = typeSerializationMap ?? new Dictionary<Type, Func<object, string>>();
            this.typeDeserializationMap = typeDeserializationMap ?? new Dictionary<Type, Func<Type, string, object>>();
            this.SupportedMediaTypes?.Add(new System.Net.Http.Headers.MediaTypeHeaderValue("application/json"));
        }

        /// <summary>
        /// Determines whether a type can be written.
        /// </summary>
        /// <param name="type">The type to write.</param>
        /// <returns>Whether the type can be written.</returns>
        public override bool CanWriteType(Type type)
        {
            return true;
        }

        /// <summary>
        /// Determines whether a type can be read.
        /// </summary>
        /// <param name="type">The type to read.</param>
        /// <returns>Whether the type can be read.</returns>
        public override bool CanReadType(Type type)
        {
            return false;
        }

        /// <inheritdoc cref="MediaTypeFormatter"/>
        public override Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext)
        {
            void WriteValueToStream()
            {
                byte[] json;
                if (this.typeSerializationMap.ContainsKey(type))
                {
                    var serializedValue = this.typeSerializationMap[type](value);
                    json = Encoding.UTF8.GetBytes(serializedValue);
                }
                else
                {
                    json = new NaosJsonSerializer().SerializeToBytes(value);
                }

                writeStream.Write(json, 0, json.Length);
                writeStream.Flush();
            }

            var task = Task.Factory.StartNew(WriteValueToStream);

            return task;
        }

        /// <inheritdoc/>
        public override Task<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger)
        {
            object ReadValueFromStream()
            {
                // If there is a deserializer setup then use it.  Otherwise use the NaosJsonSerializer.
                if (this.typeDeserializationMap.ContainsKey(type))
                {
                    using (var streamReader = new StreamReader(readStream))
                    {
                        var value = streamReader.ReadToEnd();
                        var result = this.typeDeserializationMap[type](type, value);
                        return result;
                    }
                }

                using (var memoryStream = new MemoryStream())
                {
                    readStream.CopyTo(memoryStream);
                    var streamContents = memoryStream.ToArray();
                    var result = new NaosJsonSerializer().Deserialize(streamContents, type);
                    return result;
                }
            }

            var task = Task<object>.Factory.StartNew(ReadValueFromStream);

            return task;
        }
    }
}
