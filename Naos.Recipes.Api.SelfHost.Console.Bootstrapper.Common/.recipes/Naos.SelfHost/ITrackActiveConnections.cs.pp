// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ITrackActiveConnections.cs" company="Naos">
//   Copyright (c) Naos 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Naos.Recipes.Api.SelfHost.Bootstrapper.Common source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace $rootnamespace$
{
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Owin;
    using OBeautifulCode.Validation.Recipes;

    /// <summary>
    /// Interface to track running jobs from the dispatcher.
    /// </summary>
    public interface ITrackActiveConnections
    {
        /// <summary>
        /// Gets the active jobs count.
        /// </summary>
        long ActiveConnectionsCount { get; }

        /// <summary>
        /// Increases the job count by 1.
        /// </summary>
        void IncrementActiveConnections();

        /// <summary>
        /// Decreases the job count by 1.
        /// </summary>
        void DecrementActiveConnections();
    }

    /// <summary>
    /// In memory implementation of ITrackActiveJobs interface.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Recipes.Api.SelfHost.Bootstrapper.Common", "See package version number")]
    public class InMemoryActiveConnectionTracker : ITrackActiveConnections
    {
        private long activeConnectionsCount;

        /// <inheritdoc />
        public long ActiveConnectionsCount => Interlocked.Read(ref this.activeConnectionsCount);

        /// <inheritdoc />
        public void IncrementActiveConnections()
        {
            Interlocked.Increment(ref this.activeConnectionsCount);
        }

        /// <inheritdoc />
        public void DecrementActiveConnections()
        {
            Interlocked.Decrement(ref this.activeConnectionsCount);
        }
    }

    /// <summary>
    /// <see cref="OwinMiddleware" /> to increment and decrement connections.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Recipes.Api.SelfHost.Bootstrapper.Common", "See package version number")]
    public class ConnectionTrackingMiddleware : OwinMiddleware
    {
        private readonly ITrackActiveConnections connectionTracker;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionTrackingMiddleware"/> class.
        /// </summary>
        /// <param name="next">Next item.</param>
        /// <param name="connectionTracker">Connection tracker.</param>
        public ConnectionTrackingMiddleware(OwinMiddleware next, ITrackActiveConnections connectionTracker)
            : base(next)
        {
            new { connectionTracker }.Must().NotBeNull();
            this.connectionTracker = connectionTracker;
        }

        /// <inheritdoc />
        public override async Task Invoke(IOwinContext context)
        {
            this.connectionTracker.IncrementActiveConnections();

            await this.Next.Invoke(context);

            this.connectionTracker.DecrementActiveConnections();
        }
    }
}